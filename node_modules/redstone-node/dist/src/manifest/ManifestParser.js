"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ManifestHelper = /** @class */ (function () {
    function ManifestHelper() {
    }
    // This function converts tokens from manifest to object with the following
    // type: { <SourceName>: <Array of tokens to fetch from source> }
    ManifestHelper.groupTokensBySource = function (manifest) {
        var result = {};
        for (var token in manifest.tokens) {
            var source = manifest.tokens[token].source;
            var sourcesForToken = void 0;
            // If no source is defined for token
            // we use default source from manifest
            if (source === undefined || !source.length) {
                if (manifest.defaultSource === undefined) {
                    var errMsg = "Token source is not defined for \"" + token + "\""
                        + " and global source is not defined";
                    throw new Error(errMsg);
                }
                else {
                    sourcesForToken = manifest.defaultSource;
                }
            }
            else {
                sourcesForToken = source;
            }
            for (var _i = 0, sourcesForToken_1 = sourcesForToken; _i < sourcesForToken_1.length; _i++) {
                var singleSource = sourcesForToken_1[_i];
                if (result[singleSource]) {
                    result[singleSource].push(token);
                }
                else {
                    result[singleSource] = [token];
                }
            }
        }
        return result;
    };
    ManifestHelper.getTimeoutForSource = function (source, manifest) {
        if (!source.length) {
            throw ('Source for timeout not defined');
        }
        var timeoutConfiguration = manifest.sourceTimeout;
        if (!timeoutConfiguration || typeof (timeoutConfiguration) !== 'number') {
            return null;
        }
        return timeoutConfiguration;
    };
    ManifestHelper.getMaxDeviationForSymbol = function (symbol, manifest) {
        if (manifest.tokens[symbol] === undefined) {
            return null;
        }
        var result = manifest.tokens[symbol].maxPriceDeviationPercent;
        if (result === undefined) {
            result = manifest.maxPriceDeviationPercent;
        }
        if (typeof (result) !== 'number') {
            return null;
        }
        return result;
    };
    return ManifestHelper;
}());
exports.default = ManifestHelper;
