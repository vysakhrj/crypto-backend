"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var performance_tracker_1 = require("../utils/performance-tracker");
var logger = require("../utils/logger")("ArweaveService");
var deepSortObject = require("deep-sort-object");
// Business service that supplies operations required by Redstone-Node.
var ArweaveService = /** @class */ (function () {
    function ArweaveService(arweaveProxy, minBalance) {
        this.arweaveProxy = arweaveProxy;
        this.minBalance = minBalance;
    }
    ArweaveService.prototype.prepareArweaveTransaction = function (prices, nodeVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionPreparingTrackingId, tags, transaction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transactionPreparingTrackingId = performance_tracker_1.trackStart("transaction-preparing");
                        logger.info("Keeping prices on arweave blockchain - preparing transaction");
                        this.checkAllPricesHaveSameTimestamp(prices);
                        tags = this.prepareTransactionTags(nodeVersion, prices);
                        return [4 /*yield*/, this.arweaveProxy.prepareUploadTransaction(tags, prices)];
                    case 1:
                        transaction = _a.sent();
                        performance_tracker_1.trackEnd(transactionPreparingTrackingId);
                        return [2 /*return*/, transaction];
                }
            });
        });
    };
    ArweaveService.prototype.checkBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var balance, isBalanceLow, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.arweaveProxy.getBalance()];
                    case 1:
                        balance = _a.sent();
                        isBalanceLow = balance < this.minBalance;
                        logger.info("Balance: " + balance);
                        return [2 /*return*/, { balance: balance, isBalanceLow: isBalanceLow }];
                    case 2:
                        e_1 = _a.sent();
                        logger.error("Error while checking balance on Arweave", e_1.stack);
                        return [2 /*return*/, { balance: 0, isBalanceLow: true }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ArweaveService.prototype.storePricesOnArweave = function (arTransaction) {
        return __awaiter(this, void 0, void 0, function () {
            var keepingTrackingId, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Keeping prices on arweave blockchain - posting transaction\n       " + arTransaction.id);
                        keepingTrackingId = performance_tracker_1.trackStart("keeping");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.arweaveProxy.postTransaction(arTransaction)];
                    case 2:
                        _a.sent();
                        logger.info("Transaction posted: " + arTransaction.id);
                        return [3 /*break*/, 5];
                    case 3:
                        e_2 = _a.sent();
                        logger.error("Error while storing prices on Arweave", e_2.stack);
                        return [3 /*break*/, 5];
                    case 4:
                        performance_tracker_1.trackEnd(keepingTrackingId);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ArweaveService.prototype.getCurrentManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var jwkAddress, contractRegistryContract, contractRegistry, providersRegistryContractTxId, providersRegistryContract, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.arweaveProxy.getAddress()];
                    case 1:
                        jwkAddress = _a.sent();
                        contractRegistryContract = this.arweaveProxy.smartweave
                            .contract(ArweaveService.CONTRACT_REGISTRY_TX_ID)
                            .connect(this.arweaveProxy.jwk);
                        return [4 /*yield*/, contractRegistryContract.viewState({
                                function: "contractsCurrentTxId",
                                data: {
                                    contractNames: [ArweaveService.PROVIDERS_REGISTRY_CONTRACT]
                                }
                            })];
                    case 2:
                        contractRegistry = (_a.sent()).result;
                        providersRegistryContractTxId = contractRegistry[ArweaveService.PROVIDERS_REGISTRY_CONTRACT];
                        providersRegistryContract = this.arweaveProxy.smartweave
                            .contract(providersRegistryContractTxId)
                            .connect(this.arweaveProxy.jwk);
                        return [4 /*yield*/, providersRegistryContract.viewState({
                                function: "activeManifest",
                                data: {
                                    providerId: jwkAddress,
                                    eagerManifestLoad: true
                                }
                            })];
                    case 3:
                        result = (_a.sent()).result;
                        return [2 /*return*/, result.manifest.activeManifestContent];
                }
            });
        });
    };
    ArweaveService.prototype.signPrice = function (price) {
        return __awaiter(this, void 0, void 0, function () {
            var priceWithSortedProps, priceStringified, signature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        priceWithSortedProps = deepSortObject(price);
                        priceStringified = JSON.stringify(priceWithSortedProps);
                        return [4 /*yield*/, this.arweaveProxy.sign(priceStringified)];
                    case 1:
                        signature = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, price), { signature: signature })];
                }
            });
        });
    };
    ArweaveService.prototype.checkAllPricesHaveSameTimestamp = function (prices) {
        if (!prices || prices.length === 0) {
            throw new Error("Can not keep empty array of prices in Arweave");
        }
        var differentTimestamps = new Set(prices.map(function (price) { return price.timestamp; }));
        if (differentTimestamps.size !== 1) {
            throw new Error("All prices should have same timestamps.\n     Found " + differentTimestamps.size + " different timestamps.");
        }
    };
    ArweaveService.prototype.prepareTransactionTags = function (nodeVersion, prices) {
        var tags = {
            app: "Redstone",
            type: "data",
            version: nodeVersion,
            // Tags for HTTP headers
            "Content-Type": "application/json",
            "Content-Encoding": "gzip",
            // All prices have the same timestamp
            timestamp: String(prices[0].timestamp),
        };
        // Adding AR price to tags if possible
        var arPrice = prices.find(function (p) { return p.symbol === "AR"; });
        if (arPrice !== undefined) {
            tags["AR"] = String(arPrice.value);
        }
        return tags;
    };
    ArweaveService.CONTRACT_REGISTRY_TX_ID = "XQkGzXG6YknJyy-YbakEZvQKAWkW2_aPRhc3ShC8lyA";
    ArweaveService.PROVIDERS_REGISTRY_CONTRACT = "providers-registry";
    return ArweaveService;
}());
exports.default = ArweaveService;
