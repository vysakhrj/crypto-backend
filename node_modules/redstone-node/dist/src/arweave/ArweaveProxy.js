"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_1 = __importDefault(require("arweave/node"));
var util_1 = __importDefault(require("util"));
var zlib_1 = require("zlib");
var arweave_multihost_1 = __importDefault(require("arweave-multihost"));
var redstone_smartweave_1 = require("redstone-smartweave");
var logger = require("../utils/logger")("utils/arweave-proxy");
// This is a low-level "DAO" that allows to interact with Arweave blockchain
var ArweaveProxy = /** @class */ (function () {
    function ArweaveProxy(jwk) {
        this.jwk = jwk;
        this.arweave = arweave_multihost_1.default.initWithDefaultHosts({
            timeout: 60000,
            logging: true,
            logger: logger.info,
            onError: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                logger.warn.apply(logger, __spreadArray(["Arweave request failed"], args));
            },
        });
        redstone_smartweave_1.LoggerFactory.INST.setOptions({
            type: "json",
            displayFilePath: "hidden",
            displayInstanceName: false,
            minLevel: "info",
        });
        this.smartweave = redstone_smartweave_1.SmartWeaveNodeFactory.memCached(this.arweave);
    }
    ArweaveProxy.prototype.sign = function (strToSign) {
        return __awaiter(this, void 0, void 0, function () {
            var dataToSign, signature, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataToSign = new TextEncoder().encode(strToSign);
                        return [4 /*yield*/, node_1.default.crypto.sign(this.jwk, dataToSign)];
                    case 1:
                        signature = _a.sent();
                        buffer = Buffer.from(signature);
                        return [2 /*return*/, buffer.toString("base64")];
                }
            });
        });
    };
    ArweaveProxy.prototype.getAddress = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.arweave.wallets.jwkToAddress(this.jwk)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ArweaveProxy.prototype.getBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var address, rawBalance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAddress()];
                    case 1:
                        address = _a.sent();
                        return [4 /*yield*/, this.arweave.wallets.getBalance(address)];
                    case 2:
                        rawBalance = _a.sent();
                        return [2 /*return*/, parseFloat(this.arweave.ar.winstonToAr(rawBalance))];
                }
            });
        });
    };
    // This method creates and signs arweave transaction
    // It doesn't post transaction to arweave, to do so use postTransaction
    ArweaveProxy.prototype.prepareUploadTransaction = function (tags, data) {
        return __awaiter(this, void 0, void 0, function () {
            var stringifiedData, gzipPromisified, gzippedData, uploadTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stringifiedData = JSON.stringify(data);
                        gzipPromisified = util_1.default.promisify(zlib_1.gzip);
                        return [4 /*yield*/, gzipPromisified(stringifiedData)];
                    case 1:
                        gzippedData = _a.sent();
                        return [4 /*yield*/, this.arweave.createTransaction({
                                data: gzippedData,
                            }, this.jwk)];
                    case 2:
                        uploadTx = _a.sent();
                        Object.keys(tags).forEach(function (key) {
                            uploadTx.addTag(key, tags[key]);
                        });
                        // This is an experiment
                        // We want to measure transaction confirmation delay
                        // For smaller gas costs
                        // [UPDATE] looks like any transaction with smaller than default reward
                        // is not accepted by arweave :(
                        // uploadTx.reward = String(Math.round(Number(uploadTx.reward) * 0.5));
                        // Transaction id is generated during signing
                        return [4 /*yield*/, this.arweave.transactions.sign(uploadTx, this.jwk)];
                    case 3:
                        // This is an experiment
                        // We want to measure transaction confirmation delay
                        // For smaller gas costs
                        // [UPDATE] looks like any transaction with smaller than default reward
                        // is not accepted by arweave :(
                        // uploadTx.reward = String(Math.round(Number(uploadTx.reward) * 0.5));
                        // Transaction id is generated during signing
                        _a.sent();
                        return [2 /*return*/, uploadTx];
                }
            });
        });
    };
    ArweaveProxy.prototype.postTransaction = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            var uploader;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.arweave.transactions.getUploader(tx)];
                    case 1:
                        uploader = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!!uploader.isComplete) return [3 /*break*/, 4];
                        return [4 /*yield*/, uploader.uploadChunk()];
                    case 3:
                        _a.sent();
                        logger.info(uploader.pctComplete + "% complete, " + uploader.uploadedChunks + "/" + uploader.totalChunks);
                        return [3 /*break*/, 2];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return ArweaveProxy;
}());
exports.default = ArweaveProxy;
;
