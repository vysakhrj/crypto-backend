import { Manifest, PriceDataAfterAggregation, PriceDataBeforeSigning, PriceDataSigned } from "../types";
import ArweaveProxy from "./ArweaveProxy";
import Transaction from "arweave/node/lib/transaction";
export declare type BalanceCheckResult = {
    balance: number;
    isBalanceLow: boolean;
};
export default class ArweaveService {
    private readonly arweaveProxy;
    private readonly minBalance;
    private static readonly CONTRACT_REGISTRY_TX_ID;
    private static readonly PROVIDERS_REGISTRY_CONTRACT;
    constructor(arweaveProxy: ArweaveProxy, minBalance: number);
    prepareArweaveTransaction(prices: PriceDataAfterAggregation[], nodeVersion: string): Promise<Transaction>;
    checkBalance(): Promise<BalanceCheckResult>;
    storePricesOnArweave(arTransaction: Transaction): Promise<void>;
    getCurrentManifest(): Promise<Manifest>;
    signPrice(price: PriceDataBeforeSigning): Promise<PriceDataSigned>;
    private checkAllPricesHaveSameTimestamp;
    private prepareTransactionTags;
}
