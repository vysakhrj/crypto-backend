"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MANIFEST_REFRESH_INTERVAL = void 0;
var aggregators_1 = __importDefault(require("./aggregators"));
var broadcasters_1 = require("./broadcasters");
var ArweaveProxy_1 = __importDefault(require("./arweave/ArweaveProxy"));
var mode_1 = __importDefault(require("../mode"));
var ManifestParser_1 = __importDefault(require("./manifest/ManifestParser"));
var ArweaveService_1 = __importDefault(require("./arweave/ArweaveService"));
var objects_1 = require("./utils/objects");
var PriceSignerService_1 = __importDefault(require("./signers/PriceSignerService"));
var performance_tracker_1 = require("./utils/performance-tracker");
var PricesService_1 = __importDefault(require("./fetchers/PricesService"));
var logger = require("./utils/logger")("runner");
var pjson = require("../package.json");
exports.MANIFEST_REFRESH_INTERVAL = 120 * 1000;
var MANIFEST_LOAD_TIMEOUT_MS = 25 * 1000;
var NodeRunner = /** @class */ (function () {
    function NodeRunner(arweaveService, providerAddress, nodeConfig, initialManifest) {
        this.arweaveService = arweaveService;
        this.providerAddress = providerAddress;
        this.nodeConfig = nodeConfig;
        this.newManifest = null;
        this.version = getVersionFromPackageJSON();
        var minimumArBalance = this.nodeConfig.minimumArBalance;
        if (this.nodeConfig.minimumArBalance === undefined || typeof (minimumArBalance) !== "number") {
            throw new Error("minimumArBalance not defined in config file");
        }
        this.useNewManifest(initialManifest);
        this.lastManifestLoadTimestamp = Date.now();
        this.broadcaster = new broadcasters_1.HttpBroadcaster(nodeConfig.httpBroadcasterURLs);
        //https://www.freecodecamp.org/news/the-complete-guide-to-this-in-javascript/
        //alternatively use arrow functions...
        this.runIteration = this.runIteration.bind(this);
        this.handleLoadedManifest = this.handleLoadedManifest.bind(this);
    }
    NodeRunner.create = function (jwk, nodeConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var arweave, providerAddress, arweaveService, manifestData, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        arweave = new ArweaveProxy_1.default(jwk);
                        return [4 /*yield*/, arweave.getAddress()];
                    case 1:
                        providerAddress = _a.sent();
                        arweaveService = new ArweaveService_1.default(arweave, nodeConfig.minimumArBalance);
                        manifestData = null;
                        if (!nodeConfig.useManifestFromSmartContract) return [3 /*break*/, 8];
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 7];
                        logger.info("Fetching manifest data.");
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, arweaveService.getCurrentManifest()];
                    case 4:
                        manifestData = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        logger.error("Initial manifest read failed.", e_1.stack || e_1);
                        return [3 /*break*/, 6];
                    case 6:
                        if (manifestData !== null) {
                            logger.info("Fetched manifest", manifestData);
                            return [3 /*break*/, 7];
                        }
                        return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        manifestData = objects_1.readJSON(nodeConfig.manifestFile);
                        _a.label = 9;
                    case 9: return [2 /*return*/, new NodeRunner(arweaveService, providerAddress, nodeConfig, manifestData)];
                }
            });
        });
    };
    NodeRunner.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Running redstone-node with manifest:\n      " + JSON.stringify(this.currentManifest) + "\n      Version: " + this.version + "\n      Address: " + this.providerAddress + "\n    ");
                        return [4 /*yield*/, this.exitIfBalanceTooLow()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.runIteration()];
                    case 3:
                        _a.sent(); // Start immediately then repeat in manifest.interval
                        setInterval(this.runIteration, this.currentManifest.interval);
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        NodeRunner.reThrowIfManifestConfigError(e_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.prototype.exitIfBalanceTooLow = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, balance, isBalanceLow;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.arweaveService.checkBalance()];
                    case 1:
                        _a = _b.sent(), balance = _a.balance, isBalanceLow = _a.isBalanceLow;
                        if (isBalanceLow) {
                            logger.fatal("You should have at least " + this.nodeConfig.minimumArBalance + "\n         AR to start a node service. Current balance: " + balance);
                            throw new Error("AR balance too low to start node.");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.prototype.runIteration = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Running new iteration.");
                        if (this.newManifest !== null) {
                            logger.info("Using new manifest: ", this.newManifest.txId);
                            this.useNewManifest(this.newManifest);
                        }
                        this.maybeLoadManifestFromSmartContract();
                        return [4 /*yield*/, this.safeProcessManifestTokens()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.warnIfARBalanceLow()];
                    case 2:
                        _a.sent();
                        performance_tracker_1.printTrackingState();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    NodeRunner.prototype.safeProcessManifestTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var processingAllTrackingId, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        processingAllTrackingId = performance_tracker_1.trackStart("processing-all");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.doProcessTokens()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_3 = _a.sent();
                        NodeRunner.reThrowIfManifestConfigError(e_3);
                        return [3 /*break*/, 5];
                    case 4:
                        performance_tracker_1.trackEnd(processingAllTrackingId);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.prototype.warnIfARBalanceLow = function () {
        return __awaiter(this, void 0, void 0, function () {
            var balanceCheckingTrackingId, _a, balance, isBalanceLow, e_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        balanceCheckingTrackingId = performance_tracker_1.trackStart("balance-checking");
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.arweaveService.checkBalance()];
                    case 2:
                        _a = _b.sent(), balance = _a.balance, isBalanceLow = _a.isBalanceLow;
                        if (isBalanceLow) {
                            logger.warn("AR balance is quite low: " + balance);
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        e_4 = _b.sent();
                        logger.error("Balance checking failed", e_4.stack);
                        return [3 /*break*/, 5];
                    case 4:
                        performance_tracker_1.trackEnd(balanceCheckingTrackingId);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.prototype.doProcessTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var aggregatedPrices, arTransaction, pricesReadyForSigning, signedPrices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Processing tokens");
                        return [4 /*yield*/, this.fetchPrices()];
                    case 1:
                        aggregatedPrices = _a.sent();
                        return [4 /*yield*/, this.arweaveService.prepareArweaveTransaction(aggregatedPrices, this.version)];
                    case 2:
                        arTransaction = _a.sent();
                        pricesReadyForSigning = this.pricesService.preparePricesForSigning(aggregatedPrices, arTransaction.id, this.providerAddress);
                        return [4 /*yield*/, this.priceSignerService.signPrices(pricesReadyForSigning)];
                    case 3:
                        signedPrices = _a.sent();
                        // Broadcasting
                        return [4 /*yield*/, this.broadcastPrices(signedPrices)];
                    case 4:
                        // Broadcasting
                        _a.sent();
                        return [4 /*yield*/, this.broadcastEvmPricePackage(signedPrices)];
                    case 5:
                        _a.sent();
                        if (!mode_1.default.isProd) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.arweaveService.storePricesOnArweave(arTransaction)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        logger.info("Transaction posting skipped in non-prod env: " + arTransaction.id);
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.prototype.fetchPrices = function () {
        return __awaiter(this, void 0, void 0, function () {
            var fetchingAllTrackingId, fetchTimestamp, fetchedPrices, pricesData, pricesBeforeAggregation, aggregatedPrices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchingAllTrackingId = performance_tracker_1.trackStart("fetching-all");
                        fetchTimestamp = Date.now();
                        return [4 /*yield*/, this.pricesService.fetchInParallel(this.tokensBySource)];
                    case 1:
                        fetchedPrices = _a.sent();
                        pricesData = objects_1.mergeObjects(fetchedPrices);
                        pricesBeforeAggregation = PricesService_1.default.groupPricesByToken(fetchTimestamp, pricesData, this.version);
                        aggregatedPrices = this.pricesService.calculateAggregatedValues(Object.values(pricesBeforeAggregation), // what is the advantage of using lodash.values?
                        aggregators_1.default[this.currentManifest.priceAggregator]);
                        NodeRunner.printAggregatedPrices(aggregatedPrices);
                        performance_tracker_1.trackEnd(fetchingAllTrackingId);
                        return [2 /*return*/, aggregatedPrices];
                }
            });
        });
    };
    NodeRunner.prototype.broadcastPrices = function (signedPrices) {
        return __awaiter(this, void 0, void 0, function () {
            var broadcastingTrackingId, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Broadcasting prices");
                        broadcastingTrackingId = performance_tracker_1.trackStart("broadcasting");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.broadcaster.broadcast(signedPrices)];
                    case 2:
                        _a.sent();
                        logger.info("Broadcasting completed");
                        return [3 /*break*/, 5];
                    case 3:
                        e_5 = _a.sent();
                        if (e_5.response !== undefined) {
                            logger.error("Broadcasting failed: " + e_5.response.data, e_5.stack);
                        }
                        else {
                            logger.error("Broadcasting failed", e_5.stack);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        performance_tracker_1.trackEnd(broadcastingTrackingId);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.printAggregatedPrices = function (prices) {
        for (var _i = 0, prices_1 = prices; _i < prices_1.length; _i++) {
            var price = prices_1[_i];
            var sourcesData = JSON.stringify(price.source);
            logger.info("Fetched price : " + price.symbol + " : " + price.value + " | " + sourcesData);
        }
    };
    NodeRunner.prototype.broadcastEvmPricePackage = function (signedPrices) {
        return __awaiter(this, void 0, void 0, function () {
            var packageBroadcastingTrackingId, signedPackage, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Broadcasting price package");
                        packageBroadcastingTrackingId = performance_tracker_1.trackStart("package-broadcasting");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        signedPackage = this.priceSignerService.signPricePackage(signedPrices);
                        return [4 /*yield*/, this.broadcastSignedPricePackage(signedPackage)];
                    case 2:
                        _a.sent();
                        logger.info("Package broadcasting completed");
                        return [3 /*break*/, 5];
                    case 3:
                        e_6 = _a.sent();
                        logger.error("Package broadcasting failed", e_6.stack);
                        return [3 /*break*/, 5];
                    case 4:
                        performance_tracker_1.trackEnd(packageBroadcastingTrackingId);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.prototype.broadcastSignedPricePackage = function (signedPackage) {
        return __awaiter(this, void 0, void 0, function () {
            var signedPackageBroadcastingTrackingId, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        signedPackageBroadcastingTrackingId = performance_tracker_1.trackStart("signed-package-broadcasting");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.broadcaster.broadcastPricePackage(signedPackage, this.providerAddress)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_7 = _a.sent();
                        if (e_7.response !== undefined) {
                            logger.error("Signed package broadcasting failed: " + e_7.response.data, e_7.stack);
                        }
                        else {
                            logger.error("Signed package broadcasting failed", e_7.stack);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        performance_tracker_1.trackEnd(signedPackageBroadcastingTrackingId);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeRunner.reThrowIfManifestConfigError = function (e) {
        if (e.name == "ManifestConfigError") {
            throw e;
        }
        else {
            logger.error(e.stack);
        }
    };
    // TODO: refactor to a separate service?
    NodeRunner.prototype.maybeLoadManifestFromSmartContract = function () {
        var _this = this;
        if (!this.nodeConfig.useManifestFromSmartContract) {
            return;
        }
        var now = Date.now();
        var timeDiff = now - this.lastManifestLoadTimestamp;
        logger.info("Checking time since last manifest load", {
            timeDiff: timeDiff,
            "manifestRefreshInterval": exports.MANIFEST_REFRESH_INTERVAL
        });
        if (timeDiff >= exports.MANIFEST_REFRESH_INTERVAL) {
            this.lastManifestLoadTimestamp = now;
            logger.info("Trying to fetch new manifest version.");
            var manifestFetchTrackingId_1 = performance_tracker_1.trackStart("Fetching manifest.");
            try {
                // note: not using "await" here, as loading manifest's data takes about 6 seconds and we do not want to
                // block standard node processing for so long (especially for nodes with low "interval" value)
                Promise.race([
                    this.arweaveService.getCurrentManifest(),
                    objects_1.timeout(MANIFEST_LOAD_TIMEOUT_MS)
                ]).then(function (value) {
                    if (value === "timeout") {
                        logger.warn("Manifest load promise timeout");
                    }
                    else {
                        _this.handleLoadedManifest(value);
                    }
                    performance_tracker_1.trackEnd(manifestFetchTrackingId_1);
                });
            }
            catch (e) {
                logger.info("Error while calling manifest load function.");
            }
        }
        else {
            logger.info("Skipping manifest download in this iteration run.");
        }
    };
    NodeRunner.prototype.handleLoadedManifest = function (loadedManifest) {
        var _a, _b;
        if (!loadedManifest) {
            return;
        }
        logger.info("Manifest successfully loaded", {
            "loadedManifestTxId": loadedManifest.txId,
            "currentTxId": (_a = this.currentManifest) === null || _a === void 0 ? void 0 : _a.txId
        });
        if (loadedManifest.txId != ((_b = this.currentManifest) === null || _b === void 0 ? void 0 : _b.txId)) {
            logger.info("Loaded and current manifest differ, updating on next runIteration call.");
            // we're temporarily saving loaded manifest on a separate "newManifest" field
            // - calling "this.useNewManifest(this.newManifest)" here could cause that
            // that different manifests would be used by different services during given "runIteration" execution.
            this.newManifest = loadedManifest;
            loadedManifest = null;
        }
        else {
            logger.info("Loaded manifest same as current, not updating.");
        }
    };
    NodeRunner.prototype.useNewManifest = function (newManifest) {
        this.currentManifest = newManifest;
        this.pricesService = new PricesService_1.default(newManifest, this.nodeConfig.credentials);
        this.tokensBySource = ManifestParser_1.default.groupTokensBySource(newManifest);
        this.priceSignerService = new PriceSignerService_1.default({
            arweaveService: this.arweaveService,
            ethereumPrivateKey: this.nodeConfig.credentials.ethereumPrivateKey,
            evmChainId: newManifest.evmChainId,
            version: this.version,
            addEvmSignature: Boolean(this.nodeConfig.addEvmSignature),
        });
        this.newManifest = null;
    };
    return NodeRunner;
}());
exports.default = NodeRunner;
;
function getVersionFromPackageJSON() {
    var _a = pjson.version.split("."), major = _a[0], minor = _a[1];
    return major + '.' + minor;
}
