import { TokensBySource } from "../manifest/ManifestParser";
import { Aggregator, Credentials, Manifest, PriceDataAfterAggregation, PriceDataBeforeAggregation, PriceDataBeforeSigning, PriceDataFetched } from "../types";
export declare type PricesDataFetched = {
    [source: string]: PriceDataFetched[];
};
export declare type PricesBeforeAggregation = {
    [token: string]: PriceDataBeforeAggregation;
};
export default class PricesService {
    private manifest;
    private credentials;
    constructor(manifest: Manifest, credentials: Credentials);
    fetchInParallel(tokensBySource: TokensBySource): Promise<PricesDataFetched[]>;
    private safeFetchFromSource;
    doFetchFromSource(source: string, tokens: string[]): Promise<PriceDataFetched[]>;
    static groupPricesByToken(fetchTimestamp: number, pricesData: PricesDataFetched, nodeVersion: string): PricesBeforeAggregation;
    calculateAggregatedValues(prices: PriceDataBeforeAggregation[], aggregator: Aggregator): PriceDataAfterAggregation[];
    preparePricesForSigning(prices: PriceDataAfterAggregation[], idArTransaction: string, providerAddress: string): PriceDataBeforeSigning[];
    private maxPriceDeviationPercent;
}
