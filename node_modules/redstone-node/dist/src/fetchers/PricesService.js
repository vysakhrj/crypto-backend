"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var promise_timeout_1 = require("promise-timeout");
var index_1 = __importDefault(require("./index"));
var ManifestParser_1 = __importDefault(require("../manifest/ManifestParser"));
var performance_tracker_1 = require("../utils/performance-tracker");
var uuid_1 = require("uuid");
var ManifestConfigError_1 = __importDefault(require("../manifest/ManifestConfigError"));
var VALUE_FOR_FAILED_FETCHER = "error";
var logger = require("../utils/logger")("PricesFetcher");
var PricesService = /** @class */ (function () {
    function PricesService(manifest, credentials) {
        this.manifest = manifest;
        this.credentials = credentials;
    }
    PricesService.prototype.fetchInParallel = function (tokensBySource) {
        return __awaiter(this, void 0, void 0, function () {
            var promises, source;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        for (source in tokensBySource) {
                            promises.push(this.safeFetchFromSource(source, tokensBySource[source]));
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PricesService.prototype.safeFetchFromSource = function (source, tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var pricesFromSource, e_1, resData;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.doFetchFromSource(source, tokens)];
                    case 1:
                        pricesFromSource = _c.sent();
                        return [2 /*return*/, (_a = {},
                                _a[source] = pricesFromSource,
                                _a)];
                    case 2:
                        e_1 = _c.sent();
                        //not sure why instanceof is not working, crap.
                        if (e_1.name == "ManifestConfigError") {
                            throw e_1;
                        }
                        else {
                            resData = e_1.response ? e_1.response.data : "";
                            // We use warn level instead of error because
                            // price fetching errors occur quite often
                            logger.warn("Fetching failed for source: " + source + ": " + resData, e_1.stack);
                            return [2 /*return*/, (_b = {},
                                    _b[source] = tokens.map(function (symbol) {
                                        return ({ symbol: symbol, value: VALUE_FOR_FAILED_FETCHER });
                                    }),
                                    _b)];
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PricesService.prototype.doFetchFromSource = function (source, tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var fetchPromise, sourceTimeout, trackingId, prices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (tokens.length === 0) {
                            throw new ManifestConfigError_1.default(source + " fetcher received an empty array of symbols");
                        }
                        fetchPromise = index_1.default[source].fetchAll(tokens, {
                            credentials: this.credentials,
                        });
                        sourceTimeout = ManifestParser_1.default.getTimeoutForSource(source, this.manifest);
                        if (sourceTimeout === null) {
                            throw new ManifestConfigError_1.default("No timeout configured for " + source + ". Did you forget to add \"sourceTimeout\" field in manifest file?");
                        }
                        logger.info("Call to " + source + " will timeout after " + sourceTimeout + "ms");
                        trackingId = performance_tracker_1.trackStart("fetching-" + source);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, promise_timeout_1.timeout(fetchPromise, sourceTimeout)];
                    case 2:
                        prices = _a.sent();
                        logger.info("Fetched prices in USD for " + prices.length + " "
                            + ("currencies from source: \"" + source + "\""));
                        return [2 /*return*/, prices];
                    case 3:
                        performance_tracker_1.trackEnd(trackingId);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PricesService.groupPricesByToken = function (fetchTimestamp, pricesData, nodeVersion) {
        var result = {};
        for (var source in pricesData) {
            for (var _i = 0, _a = pricesData[source]; _i < _a.length; _i++) {
                var price = _a[_i];
                if (result[price.symbol] === undefined) {
                    result[price.symbol] = {
                        id: uuid_1.v4(),
                        source: {},
                        symbol: price.symbol,
                        timestamp: fetchTimestamp,
                        version: nodeVersion,
                    };
                }
                result[price.symbol].source[source] = price.value;
            }
        }
        return result;
    };
    PricesService.prototype.calculateAggregatedValues = function (prices, aggregator) {
        var aggregatedPrices = [];
        for (var _i = 0, prices_1 = prices; _i < prices_1.length; _i++) {
            var price = prices_1[_i];
            var maxPriceDeviationPercent = this.maxPriceDeviationPercent(price.symbol);
            try {
                var priceAfterAggregation = aggregator.getAggregatedValue(price, maxPriceDeviationPercent);
                if (priceAfterAggregation.value <= 0
                    || priceAfterAggregation.value === undefined) {
                    throw new Error("Invalid price value: "
                        + JSON.stringify(priceAfterAggregation));
                }
                aggregatedPrices.push(priceAfterAggregation);
            }
            catch (e) {
                // We use warn level instead of error because
                // price aggregation errors occur quite often
                logger.warn(e.stack);
            }
        }
        return aggregatedPrices;
    };
    PricesService.prototype.preparePricesForSigning = function (prices, idArTransaction, providerAddress) {
        var pricesBeforeSigning = [];
        for (var _i = 0, prices_2 = prices; _i < prices_2.length; _i++) {
            var price = prices_2[_i];
            pricesBeforeSigning.push(__assign(__assign({}, price), { permawebTx: idArTransaction, provider: providerAddress }));
        }
        return pricesBeforeSigning;
    };
    PricesService.prototype.maxPriceDeviationPercent = function (priceSymbol) {
        var result = ManifestParser_1.default.getMaxDeviationForSymbol(priceSymbol, this.manifest);
        if (result === null) {
            throw new ManifestConfigError_1.default("Could not determine maxPriceDeviationPercent for " + priceSymbol + ".\n        Did you forget to add maxPriceDeviationPercent parameter in the manifest file?");
        }
        logger.debug("maxPriceDeviationPercent for " + priceSymbol + ": " + result);
        return result;
    };
    return PricesService;
}());
exports.default = PricesService;
