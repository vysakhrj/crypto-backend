"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseFetcher = void 0;
var logger_1 = __importDefault(require("../utils/logger"));
var MAX_RESPONSE_TIME_TO_RETRY_FETCHING_MS = 3000;
var BaseFetcher = /** @class */ (function () {
    function BaseFetcher(name) {
        this.retryForInvalidResponse = false;
        this.name = name;
        this.logger = logger_1.default("fetchers/" + name);
    }
    ;
    // This method may be overridden to extend validation
    BaseFetcher.prototype.validateResponse = function (response) {
        return response !== undefined;
    };
    BaseFetcher.prototype.fetchAll = function (symbols, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var fetchStartTime, response, shouldRetry, isValid, pricesObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchStartTime = Date.now();
                        return [4 /*yield*/, this.fetchData(symbols, opts)];
                    case 1:
                        response = _a.sent();
                        shouldRetry = !this.validateResponse(response)
                            && this.retryForInvalidResponse
                            && Date.now() - fetchStartTime <= MAX_RESPONSE_TIME_TO_RETRY_FETCHING_MS;
                        if (!shouldRetry) return [3 /*break*/, 3];
                        this.logger.info("Retrying to fetch data");
                        return [4 /*yield*/, this.fetchData(symbols, opts)];
                    case 2:
                        response = _a.sent();
                        _a.label = 3;
                    case 3:
                        isValid = this.validateResponse(response);
                        if (!isValid) {
                            throw new Error("Response is invalid: " + JSON.stringify(response));
                        }
                        return [4 /*yield*/, this.extractPrices(response, symbols)];
                    case 4:
                        pricesObj = _a.sent();
                        return [2 /*return*/, this.convertPricesObjToPriceArray(pricesObj, symbols)];
                }
            });
        });
    };
    BaseFetcher.prototype.convertPricesObjToPriceArray = function (pricesObj, requiredSymbols) {
        var prices = [];
        for (var _i = 0, requiredSymbols_1 = requiredSymbols; _i < requiredSymbols_1.length; _i++) {
            var symbol = requiredSymbols_1[_i];
            if (pricesObj[symbol] === undefined) {
                this.logger.warn("Symbol " + symbol + " is not included in response for: " + this.name);
            }
            else {
                prices.push({
                    symbol: symbol,
                    value: pricesObj[symbol],
                });
            }
        }
        return prices;
    };
    ;
    return BaseFetcher;
}());
exports.BaseFetcher = BaseFetcher;
;
