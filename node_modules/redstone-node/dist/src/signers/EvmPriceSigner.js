"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = require("ethereumjs-util");
var ethers_1 = require("ethers");
var sort_deep_object_arrays_1 = __importDefault(require("sort-deep-object-arrays"));
var eth_sig_util_1 = require("eth-sig-util");
var lodash_1 = __importDefault(require("lodash"));
;
;
var PriceData = [
    { name: "symbols", type: "bytes32[]" },
    { name: "values", type: "uint256[]" },
    { name: "timestamp", type: "uint256" },
];
var EIP712Domain = [
    { name: "name", type: "string" },
    { name: "version", type: "string" },
    { name: "chainId", type: "uint256" }
];
var serializePriceValue = function (value) { return Math.round(value * (Math.pow(10, 8))); };
var EvmPriceSigner = /** @class */ (function () {
    function EvmPriceSigner(version, chainId) {
        if (version === void 0) { version = "0.4"; }
        if (chainId === void 0) { chainId = 1; }
        this._domainData = {
            name: "Redstone",
            version: version,
            chainId: chainId,
        };
    }
    EvmPriceSigner.prototype.getDataToSign = function (priceData) {
        return {
            types: {
                EIP712Domain: EIP712Domain,
                PriceData: PriceData,
            },
            domain: this._domainData,
            primaryType: "PriceData",
            message: priceData,
        };
    };
    EvmPriceSigner.prototype.getLiteDataBytesString = function (priceData) {
        // Calculating lite price data bytes array
        var data = "";
        for (var i = 0; i < priceData.symbols.length; i++) {
            var symbol = priceData.symbols[i];
            var value = priceData.values[i];
            data += symbol.substr(2) + value.toString(16).padStart(64, "0");
        }
        data += Math.ceil(priceData.timestamp / 1000)
            .toString(16)
            .padStart(64, "0");
        return data;
    };
    EvmPriceSigner.prototype.getLiteDataToSign = function (priceData) {
        var data = this.getLiteDataBytesString(priceData);
        var hash = ethereumjs_util_1.bufferToHex(ethereumjs_util_1.keccak256(ethereumjs_util_1.toBuffer("0x" + data)));
        return hash;
    };
    EvmPriceSigner.prototype.calculateEvmSignature = function (priceData, privateKey) {
        var data = this.getDataToSign(priceData);
        return eth_sig_util_1.signTypedMessage(ethereumjs_util_1.toBuffer(privateKey), { data: data }, "V4");
    };
    EvmPriceSigner.prototype.calculateLiteEvmSignature = function (priceData, privateKey) {
        var data = this.getLiteDataToSign(priceData);
        return eth_sig_util_1.personalSign(ethereumjs_util_1.toBuffer(privateKey), { data: data });
    };
    EvmPriceSigner.prototype.serializeToMessage = function (pricePackage) {
        // We clean and sort prices to be sure that prices
        // always have the same format
        var cleanPricesData = pricePackage.prices.map(function (p) { return lodash_1.default.pick(p, ["symbol", "value"]); });
        var sortedPrices = sort_deep_object_arrays_1.default(cleanPricesData);
        return {
            symbols: sortedPrices.map(function (p) {
                return ethers_1.ethers.utils.formatBytes32String(p.symbol);
            }),
            values: sortedPrices.map(function (p) {
                return serializePriceValue(p.value);
            }),
            timestamp: pricePackage.timestamp,
        };
    };
    EvmPriceSigner.prototype.signPricePackage = function (pricePackage, privateKey) {
        var serializedPriceData = this.serializeToMessage(pricePackage);
        return {
            pricePackage: pricePackage,
            signer: (new ethers_1.ethers.Wallet(privateKey)).address,
            signature: this.calculateEvmSignature(serializedPriceData, privateKey),
            liteSignature: this.calculateLiteEvmSignature(serializedPriceData, privateKey),
        };
    };
    EvmPriceSigner.prototype.verifySignature = function (signedPricePackage) {
        var serializedPriceData = this.serializeToMessage(signedPricePackage.pricePackage);
        var data = this.getDataToSign(serializedPriceData);
        var signer = eth_sig_util_1.recoverTypedMessage({
            data: data,
            sig: signedPricePackage.signature,
        });
        return signer.toUpperCase() === signedPricePackage.signer.toUpperCase();
    };
    EvmPriceSigner.prototype.verifyLiteSignature = function (signedPricePackage) {
        var serializedPriceData = this.serializeToMessage(signedPricePackage.pricePackage);
        var data = this.getLiteDataToSign(serializedPriceData);
        var signer = eth_sig_util_1.recoverPersonalSignature({
            data: data,
            sig: signedPricePackage.liteSignature,
        });
        return signer.toUpperCase() === signedPricePackage.signer.toUpperCase();
    };
    return EvmPriceSigner;
}());
exports.default = EvmPriceSigner;
