"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var EvmPriceSigner_1 = __importDefault(require("./EvmPriceSigner"));
var performance_tracker_1 = require("../utils/performance-tracker");
var logger = require("../utils/logger")("ArweaveService");
;
// Business service that supplies signing operations required by Redstone-Node
var PriceSignerService = /** @class */ (function () {
    function PriceSignerService(config) {
        this.evmSigner = new EvmPriceSigner_1.default(config.version, config.evmChainId);
        this.arweaveService = config.arweaveService;
        this.ethereumPrivateKey = config.ethereumPrivateKey;
        this.addEvmSignature = config.addEvmSignature;
    }
    PriceSignerService.prototype.signPrices = function (prices) {
        return __awaiter(this, void 0, void 0, function () {
            var signingTrackingId, signedPrices, _i, prices_1, price, signedPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        signingTrackingId = performance_tracker_1.trackStart("signing");
                        signedPrices = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 6, 7]);
                        _i = 0, prices_1 = prices;
                        _a.label = 2;
                    case 2:
                        if (!(_i < prices_1.length)) return [3 /*break*/, 5];
                        price = prices_1[_i];
                        logger.info("Signing price: " + price.id);
                        return [4 /*yield*/, this.signSinglePrice(price)];
                    case 3:
                        signedPrice = _a.sent();
                        signedPrices.push(signedPrice);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, signedPrices];
                    case 6:
                        performance_tracker_1.trackEnd(signingTrackingId);
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    PriceSignerService.prototype.signSinglePrice = function (price) {
        return __awaiter(this, void 0, void 0, function () {
            var signedPrice, packageWithSinglePrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info("Signing price with arweave signer: " + price.id);
                        return [4 /*yield*/, this.arweaveService.signPrice(price)];
                    case 1:
                        signedPrice = _a.sent();
                        if (this.addEvmSignature) {
                            logger.info("Signing price with evm signer: " + price.id);
                            packageWithSinglePrice = this.evmSigner.signPricePackage({
                                prices: [lodash_1.default.pick(price, ["symbol", "value"])],
                                timestamp: price.timestamp,
                            }, this.ethereumPrivateKey);
                            signedPrice.evmSignature = packageWithSinglePrice.signature;
                            signedPrice.liteEvmSignature = packageWithSinglePrice.liteSignature;
                        }
                        return [2 /*return*/, signedPrice];
                }
            });
        });
    };
    PriceSignerService.prototype.signPricePackage = function (prices) {
        if (prices.length === 0) {
            throw new Error("Price package should contain at least one price");
        }
        var pricePackage = {
            timestamp: prices[0].timestamp,
            prices: prices.map(function (p) { return lodash_1.default.pick(p, ["symbol", "value"]); }),
        };
        return this.evmSigner.signPricePackage(pricePackage, this.ethereumPrivateKey);
    };
    return PriceSignerService;
}());
exports.default = PriceSignerService;
