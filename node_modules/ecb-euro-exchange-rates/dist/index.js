"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchHistoric90d = exports.fetchHistoric = exports.fetch = void 0;
const axios_1 = __importDefault(require("axios"));
const xml2js_1 = __importDefault(require("xml2js"));
// http://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html
async function fetch() {
    const result = await get('http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml');
    const rates = await parse(result);
    if (rates.length !== 1) {
        throw new Error(`Expected result to contain one single entry, but got ${rates.length}`);
    }
    return rates[0];
}
exports.fetch = fetch;
async function fetchHistoric() {
    return parse(await get('https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist.xml'));
}
exports.fetchHistoric = fetchHistoric;
async function fetchHistoric90d() {
    return parse(await get('https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist-90d.xml'));
}
exports.fetchHistoric90d = fetchHistoric90d;
async function get(url) {
    const result = await axios_1.default.get(url);
    return result.data;
}
function parse(string) {
    return new Promise((resolve, reject) => {
        xml2js_1.default.parseString(string, (err, data) => {
            if (err)
                return reject(err);
            const result = [];
            const entries = data['gesmes:Envelope']['Cube'][0]['Cube'];
            for (const current of entries) {
                const time = current['$']['time'];
                const rates = {};
                for (const item of current['Cube']) {
                    const currency = item['$']['currency'];
                    const rate = parseFloat(item['$']['rate']);
                    rates[currency] = rate;
                }
                result.push({ time, rates });
            }
            resolve(result);
        });
    });
}
// CLI only when module is not require'd
if (require.main === module) {
    (async () => {
        const result = await fetch();
        console.log(JSON.stringify(result, null, 2));
    })().catch(() => process.exit(1));
}
